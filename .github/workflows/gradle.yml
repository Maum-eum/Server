name: Java CI/CD with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # üî• SSH ÌÇ§ ÎîîÏΩîÎî©ÏùÑ Í∞ÄÏû• Î®ºÏ†Ä ÏàòÌñâ
      - name: Decode SSH Key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | base64 --decode > private_key.pem
          chmod 600 private_key.pem

      - name: Set up SSH tunnel to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -N -L 13306:${{ secrets.RDS_HOST }}:3306 ubuntu@${{ secrets.EC2_PUBLIC_IP }} -i private_key.pem &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build without Tests
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{secrets.JWT_SECRET}}
          BUCKET_NAME: ${{secrets.BUCKET_NAME}}
          S3_ACCESS_KEY: ${{secrets.S3_ACCESS_KEY}}
          S3_SECRET_KEY: ${{secrets.S3_SECRET_KEY}}
          S3_REGION: ${{secrets.S3_REGION}}
          CLOUDFRONT_DOMAIN: ${{secrets.CLOUDFRONT_DOMAIN}}
        run: ./gradlew build -x test

      - name: Debug Build Output
        run: ls -lah build/libs/


      # üöÄ Í∏∞Ï°¥ JAR ÌååÏùº ÏÇ≠Ï†ú (ÏóÖÎ°úÎìú Ï†Ñ ÏïàÏ†ÑÌïòÍ≤å ÏÇ≠Ï†ú)
      - name: Remove Old JAR from EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Deleting old application files..."
            rm -rf /home/ubuntu/app.jar /home/ubuntu/app.tar.gz
          EOF

      # üöÄ ÏïïÏ∂ï ÌõÑ ÏóÖÎ°úÎìú (JARÏùÑ tar.gzÏúºÎ°ú ÏïïÏ∂ï)
      - name: Upload JAR to EC2 (Optimized)
        run: |
          echo "Finding correct JAR file..."
          JAR_FILE=$(ls build/libs/*.jar | grep -v plain | head -n 1)

          if [ -z "$JAR_FILE" ]; then
            echo "ERROR: No valid JAR file found!"
            exit 1
          fi

          echo "Compressing JAR file..."
          tar czf app.tar.gz -C build/libs $(basename $JAR_FILE)

          echo "Uploading JAR to EC2..."
          scp -o StrictHostKeyChecking=no -i private_key.pem app.tar.gz ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/


      # üöÄ Î∞∞Ìè¨ Î∞è Ïã§Ìñâ
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Stopping old application..."
            pids=$(pgrep -f 'java -jar')
            if [ -n "$pids" ]; then
              echo "Killing process: $pids"
              kill -9 $pids
            else
              echo "No process found."
            fi

            echo "Extracting new application..."
            tar xzf /home/ubuntu/app.tar.gz -C /home/ubuntu/

            echo "Finding correct JAR file..."
            APP_JAR=$(ls /home/ubuntu/*.jar | grep -v plain | head -n 1)

            if [ -z "$APP_JAR" ]; then
              echo "ERROR: No valid JAR file found!"
              exit 1
            fi

            echo "Starting new application with $APP_JAR..."
            SPRING_DATASOURCE_URL=${{ secrets.DB_NAME }} \
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            JWT_SECRET=${{ secrets.JWT_SECRET }} \
            BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} \
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }} \
            S3_REGION=${{ secrets.S3_REGION }} \
            CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }} \
            nohup java -jar $APP_JAR --spring.profiles.active=prod > /home/ubuntu/app.log 2>&1 &

            echo "Application started successfully!"
          EOF


  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4.0.0
