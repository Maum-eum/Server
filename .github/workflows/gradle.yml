name: Java CI/CD with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # 🔥 SSH 키 디코딩을 가장 먼저 수행
      - name: Decode SSH Key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | base64 --decode > private_key.pem
          chmod 600 private_key.pem

      - name: Set up SSH tunnel to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -N -L 13306:${{ secrets.RDS_HOST }}:3306 ubuntu@${{ secrets.EC2_PUBLIC_IP }} -i private_key.pem &

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build without Tests
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{secrets.JWT_SECRET}}
        run: ./gradlew build -x test

      # 🚀 기존 JAR 파일 삭제 (업로드 전 안전하게 삭제)
      - name: Remove Old JAR from EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Deleting old application files..."
            rm -rf /home/ubuntu/app.jar /home/ubuntu/app.tar.gz
          EOF

      # 🚀 압축 후 업로드 (JAR을 tar.gz으로 압축)
      - name: Upload JAR to EC2 (Optimized)
        run: |
          tar czf app.tar.gz -C build/libs .
          scp -o StrictHostKeyChecking=no -i private_key.pem app.tar.gz ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/

      # 🚀 배포 및 실행
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Setting environment variables..."
            export SPRING_DATASOURCE_URL=${{ secrets.DB_NAME }}
            export SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
            export SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            echo "Stopping old application..."
            pkill -f 'java -jar' || true
      
            echo "Extracting new application..."
            tar xzf /home/ubuntu/app.tar.gz -C /home/ubuntu/
          
            echo "Finding correct JAR file..."
            APP_JAR=$(ls /home/ubuntu/*.jar | grep -v plain | head -n 1)
      
            if [ -z "$APP_JAR" ]; then
              echo "ERROR: No valid JAR file found!"
              exit 1
            fi
          
            echo "Starting new application with $APP_JAR"
            nohup java -jar $APP_JAR --spring.profiles.active=prod > /home/ubuntu/app.log 2>&1 &
            echo "Application started successfully!"
          EOF

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4.0.0
